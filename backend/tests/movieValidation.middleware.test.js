import { jest, describe, it, expect, beforeEach } from '@jest/globals';

// Gi·∫£ s·ª≠ c√°c middleware ƒë∆∞·ª£c export t·ª´ file n√†y
import {
  validateCreateMovie,
  validateUpdateMovie,
  validateStatusUpdate,
} from '../middlewares/movieValidation.js'; // S·ª≠a l·∫°i ƒë∆∞·ªùng d·∫´n n·∫øu c·∫ßn

describe('Movie Validation Middlewares', () => {
  let mockReq;
  let mockRes;
  let mockNext;

  // Tr∆∞·ªõc m·ªói b√†i test, t·∫°o l·∫°i c√°c object mock ƒë·ªÉ ƒë·∫£m b·∫£o s·ª± c√¥ l·∫≠p
  beforeEach(() => {
    mockReq = {
      body: {},
    };
    mockRes = {
      status: jest.fn().mockReturnThis(),
      json: jest.fn(),
    };
    mockNext = jest.fn();
  });

  // --- Tests cho validateCreateMovie ---
  describe('validateCreateMovie', () => {
    it('n√™n g·ªçi next() khi t·∫•t c·∫£ d·ªØ li·ªáu b·∫Øt bu·ªôc v√† t√πy ch·ªçn ƒë·ªÅu h·ª£p l·ªá', () => {
      mockReq.body = {
        title: 'Inception',
        duration: 148,
        description: 'A mind-bending thriller.',
        genre: ['Sci-Fi', 'Action'],
        status: 'active'
      };

      validateCreateMovie(mockReq, mockRes, mockNext);

      expect(mockNext).toHaveBeenCalled();
      expect(mockRes.status).not.toHaveBeenCalled();
    });

    it('n√™n tr·∫£ v·ªÅ l·ªói 400 n·∫øu thi·∫øu "title"', () => {
      mockReq.body = { duration: 148 };

      validateCreateMovie(mockReq, mockRes, mockNext);

      expect(mockNext).not.toHaveBeenCalled();
      expect(mockRes.status).toHaveBeenCalledWith(400);
      expect(mockRes.json).toHaveBeenCalledWith(expect.objectContaining({
        error: "VALIDATION_ERROR",
        details: expect.arrayContaining([
          expect.objectContaining({
            field: 'title',
            message: 'Ti√™u ƒë·ªÅ phim l√† b·∫Øt bu·ªôc v√† ph·∫£i l√† chu·ªói vƒÉn b·∫£n kh√¥ng r·ªóng'
          })
        ])
      }));
    });

    it('n√™n tr·∫£ v·ªÅ l·ªói 400 n·∫øu thi·∫øu "duration"', () => {
      mockReq.body = { title: 'Inception' };

      validateCreateMovie(mockReq, mockRes, mockNext);

      expect(mockNext).not.toHaveBeenCalled();
      expect(mockRes.status).toHaveBeenCalledWith(400);
      expect(mockRes.json).toHaveBeenCalledWith(expect.objectContaining({
        error: "VALIDATION_ERROR",
        details: expect.arrayContaining([
          expect.objectContaining({
            field: 'duration',
            message: 'Th·ªùi l∆∞·ª£ng phim l√† b·∫Øt bu·ªôc v√† ph·∫£i l√† s·ªë d∆∞∆°ng' 
          })
        ])
      }));
    });

    it('n√™n tr·∫£ v·ªÅ l·ªói 400 n·∫øu "title" l√† chu·ªói r·ªóng ho·∫∑c ch·ªâ c√≥ kho·∫£ng tr·∫Øng', () => {
      mockReq.body = { title: ' ¬†', duration: 148 };
      validateCreateMovie(mockReq, mockRes, mockNext);
      expect(mockNext).not.toHaveBeenCalled();
      expect(mockRes.status).toHaveBeenCalledWith(400);
      expect(mockRes.json).toHaveBeenCalledWith(expect.objectContaining({
        details: expect.arrayContaining([
          expect.objectContaining({ field: 'title', message: expect.stringContaining('kh√¥ng r·ªóng') })
        ])
      }));
    });

    it('n√™n tr·∫£ v·ªÅ l·ªói 400 n·∫øu "duration" kh√¥ng ph·∫£i l√† s·ªë d∆∞∆°ng', () => {
      mockReq.body = { title: 'Inception', duration: 0 }; 
      validateCreateMovie(mockReq, mockRes, mockNext);
      expect(mockNext).not.toHaveBeenCalled();
      expect(mockRes.status).toHaveBeenCalledWith(400);
      expect(mockRes.json).toHaveBeenCalledWith(expect.objectContaining({
        error: "VALIDATION_ERROR",
        details: expect.arrayContaining([
            expect.objectContaining({
                field: 'duration',
                message: 'Th·ªùi l∆∞·ª£ng phim l√† b·∫Øt bu·ªôc v√† ph·∫£i l√† s·ªë d∆∞∆°ng' 
            })
        ])
      }));
    });

    it('n√™n tr·∫£ v·ªÅ l·ªói 400 n·∫øu m·ªôt tr∆∞·ªùng t√πy ch·ªçn kh√¥ng h·ª£p l·ªá (v√≠ d·ª•: genre)', () => {
      mockReq.body = {
        title: 'Inception',
        duration: 148,
        genre: 'Sci-Fi' // genre ph·∫£i l√† m·ªôt m·∫£ng
      };
      validateCreateMovie(mockReq, mockRes, mockNext);
      expect(mockNext).not.toHaveBeenCalled();
      expect(mockRes.status).toHaveBeenCalledWith(400);
      expect(mockRes.json).toHaveBeenCalledWith(expect.objectContaining({
        details: expect.arrayContaining([
          expect.objectContaining({ field: 'genre' })
        ])
      }));
    });

    it('l√†m s·∫°ch (trim) c√°c chu·ªói v√† chu·∫©n h√≥a status tr∆∞·ªõc khi g·ªçi next()', () => {
      mockReq.body = {
        title: ' ¬† The Dark Knight ¬† ',
        duration: 152,
        status: ' ¬†ACTIVE '
      };

      validateCreateMovie(mockReq, mockRes, mockNext);

      expect(mockNext).toHaveBeenCalled();
      expect(mockReq.body.title).toBe('The Dark Knight');
      expect(mockReq.body.status).toBe('active');
    });
  });

  // --- Tests cho validateUpdateMovie ---
  describe('validateUpdateMovie', () => {
    // üî• L∆ØU √ù: Middleware ƒë√£ ƒë∆∞·ª£c refactor ƒë·ªÉ KH√îNG cho ph√©p body r·ªóng
    it('tr·∫£ v·ªÅ l·ªói 400 khi body r·ªóng (v√¨ ph·∫£i c√≥ √≠t nh·∫•t 1 tr∆∞·ªùng ƒë·ªÉ c·∫≠p nh·∫≠t)', () => {
      mockReq.body = {};
      validateUpdateMovie(mockReq, mockRes, mockNext);
      
      expect(mockNext).not.toHaveBeenCalled();
      expect(mockRes.status).toHaveBeenCalledWith(400);
      expect(mockRes.json).toHaveBeenCalledWith(expect.objectContaining({
          message: "Y√™u c·∫ßu c·∫≠p nh·∫≠t ph·∫£i ch·ª©a √≠t nh·∫•t m·ªôt tr∆∞·ªùng d·ªØ li·ªáu",
          error: "NO_FIELDS_TO_UPDATE"
      }));
    });

    it('g·ªçi next() khi ch·ªâ cung c·∫•p c√°c tr∆∞·ªùng h·ª£p l·ªá', () => {
      mockReq.body = { description: 'A hero rises.', trailer_url: 'http://example.com' };
      validateUpdateMovie(mockReq, mockRes, mockNext);
      expect(mockNext).toHaveBeenCalled();
      expect(mockRes.status).not.toHaveBeenCalled(); // ƒê·∫£m b·∫£o kh√¥ng c√≥ l·ªói
    });

    it.each([
      ['description', 12345, 'chu·ªói vƒÉn b·∫£n'],
      ['genre', 'Action', 'm·∫£ng c√°c chu·ªói'],
      ['genre', ['Action', ''], 'chu·ªói vƒÉn b·∫£n kh√¥ng r·ªóng'], // Test genre c√≥ chu·ªói r·ªóng
      ['release_date', 'not-a-date', 'ng√†y h·ª£p l·ªá'],
      ['status', 'archived', 'active\' ho·∫∑c \'inactive'],
    ])('n√™n tr·∫£ v·ªÅ l·ªói 400 n·∫øu tr∆∞·ªùng "%s" kh√¥ng h·ª£p l·ªá', (field, value, expectedMessagePart) => {
      mockReq.body = { [field]: value };
      validateUpdateMovie(mockReq, mockRes, mockNext);

      expect(mockNext).not.toHaveBeenCalled();
      expect(mockRes.status).toHaveBeenCalledWith(400);
      expect(mockRes.json).toHaveBeenCalledWith(expect.objectContaining({
        error: "VALIDATION_ERROR",
        details: expect.arrayContaining([
          expect.objectContaining({
            field: field,
            message: expect.stringContaining(expectedMessagePart)
          })
        ])
      }));
    });

    it('chu·∫©n h√≥a (normalize) gi√° tr·ªã status v√† trim c√°c chu·ªói', () => {
      mockReq.body = {
        status: ' Active ',
        description: ' ¬†leading and trailing spaces ¬†'
      };
      validateUpdateMovie(mockReq, mockRes, mockNext);
      expect(mockNext).toHaveBeenCalled();
      expect(mockReq.body.status).toBe('active');
      expect(mockReq.body.description).toBe('leading and trailing spaces');
    });
  });

  // --- Tests cho validateStatusUpdate ---
  describe('validateStatusUpdate', () => {
    it('g·ªçi next() v√† chu·∫©n h√≥a status h·ª£p l·ªá', () => {
      mockReq.body = { status: ' Inactive ¬†' };
      validateStatusUpdate(mockReq, mockRes, mockNext);
      expect(mockNext).toHaveBeenCalled();
      expect(mockRes.status).not.toHaveBeenCalled();
      expect(mockReq.body.status).toBe('inactive');
    });

    it('tr·∫£ v·ªÅ l·ªói 400 n·∫øu thi·∫øu "status"', () => {
      mockReq.body = {}; // Kh√¥ng c√≥ tr∆∞·ªùng status
      validateStatusUpdate(mockReq, mockRes, mockNext);

      expect(mockNext).not.toHaveBeenCalled();
      expect(mockRes.status).toHaveBeenCalledWith(400);
      // üî• L∆ØU √ù: validateStatusUpdate c√≥ c·∫•u tr√∫c l·ªói ƒë∆°n gi·∫£n
      expect(mockRes.json).toHaveBeenCalledWith(expect.objectContaining({
        message: "Tr·∫°ng th√°i l√† b·∫Øt bu·ªôc",
        error: "MISSING_STATUS"
      }));
    });

    it('tr·∫£ v·ªÅ l·ªói 400 n·∫øu "status" l√† chu·ªói r·ªóng', () => {
      mockReq.body = { status: ' ¬† ' }; // Chu·ªói ch·ªâ c√≥ kho·∫£ng tr·∫Øng
      validateStatusUpdate(mockReq, mockRes, mockNext);

      expect(mockNext).not.toHaveBeenCalled();
      expect(mockRes.status).toHaveBeenCalledWith(400);
      // üî• L∆ØU √ù: validateStatusUpdate c√≥ c·∫•u tr√∫c l·ªói ƒë∆°n gi·∫£n
      expect(mockRes.json).toHaveBeenCalledWith(expect.objectContaining({
        message: "Tr·∫°ng th√°i kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng",
        error: "EMPTY_STATUS"
      }));
    });

    it('tr·∫£ v·ªÅ l·ªói 400 n·∫øu "status" l√† m·ªôt gi√° tr·ªã kh√¥ng ƒë∆∞·ª£c ph√©p', () => {
      mockReq.body = { status: 'pending' };
      validateStatusUpdate(mockReq, mockRes, mockNext);

      expect(mockNext).not.toHaveBeenCalled();
      expect(mockRes.status).toHaveBeenCalledWith(400);
      // üî• L∆ØU √ù: validateStatusUpdate c√≥ c·∫•u tr√∫c l·ªói ƒë∆°n gi·∫£n
      expect(mockRes.json).toHaveBeenCalledWith(expect.objectContaining({
        message: expect.stringContaining('active\' ho·∫∑c \'inactive'),
        error: "INVALID_STATUS_VALUE",
        received: 'pending'
      }));
    });
  });
});